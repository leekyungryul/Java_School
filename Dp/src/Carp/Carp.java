package Carp;

import java.io.FileInputStream;
import java.util.Scanner;

public class Carp {
//	강남역에서 붕어빵 장사를 하고 있는 해빈이는 지금 붕어빵이 N개 남았다.
//	해빈이는 적절히 붕어빵 세트 메뉴를 구성해서 붕어빵을 팔아서 얻을 수 있는 수익을 최대로 만드려고 한다. 
//	붕어빵 세트 메뉴는 붕어빵을 묶어서 파는 것을 의미하고, 세트 메뉴의 가격은 이미 정해져 있다.
//	붕어빵 i개로 이루어진 세트 메뉴의 가격은 Pi 원이다.
//	붕어빵이 4개 남아 있고, 1개 팔 때의 가격이 1, 2개는 5, 3개는 6, 4개는 7인 경우에 해빈이가 얻을 수 있는 최대 수익은 10원이다. 
//	2개, 2개로 붕어빵을 팔면 되기 때문이다.
//	1개 팔 때의 가격이 5, 2개는 2, 3개는 8, 4개는 10 인 경우에는 20이 된다. 1개, 1개, 1개, 1개로 붕어빵을 팔면 되기 때문이다.
//	마지막으로, 1개 팔 때의 가격이 3, 2개는 5, 3개는 15, 4개는 16인 경우에는 정답은 18이다. 붕어빵을 3개, 1개로 팔면 되기 때문이다.
//	세트 메뉴의 가격이 주어졌을 때, 해빈이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.
//	입력과 출력
//	해빈이가 가지고 있는 붕어빵의 개수 N이 주어지고(1<=N<=1000) 두번째줄에는 Pi가 P1부터 PN까지 순서대로 주어진다. (1 ≤ Pi ≤ 10,000)
	public static void main(String[] args) throws Exception{
		System.setIn(new FileInputStream("src/carp.txt"));
		Scanner s = new Scanner(System.in);
//		붕어빵 최대이익으로 판매하기
//		팔고자 하는 붕어빵의 숫자를 입력한다.
		int n = s.nextInt();
//		갯수별 최대이익을 담을 배열을 하나 생성했다.
//		0개팔때 최대이익은 0이고 1개팔때 최대이익은 제시된 값 그대로 사용하면된다
//		1번 인덱스부터 사용하기위해서 하나 배열의 길이를 하나더 여유있게했다.
		int[] dp = new int[n+1];
		int[] p = new int[n+1];
//		앞서만든 배열에 판매갯수별 최대이익을 담는다.
		for(int i = 1; i <= n; i++) {
			p[i] = s.nextInt();
		}
		
//		다음으로 N개 중 2개의 붕어빵을 팔때 얻을 수 있는 최대 이익은
//		dp[2] = dp[1] + p[1] or dp[0] + p[2] 이다.
//		3개의 붕어빵을 팔때 얻을 수 있는 최대 이익은
//		dp[3] = dp[2] + p[1] or dp[1] + p[2] or dp[0] + p[3] 이다.
//		4개의 붕어빵을 팔때 얻을 수 있는 최대 이익은
//		dp[4] = dp[3] + p[1] or dp[2] + p[2] or or dp[1] + p[3] or dp[0] + p[4] 이다. 
		
//		이중반복문으로 외부에는 판매를 원하는 붕어빵의 갯수
		for(int i = 1; i <= n; i++) {
//			내부에는 1 ~ 외부반복문 인자까지
			for(int j = 1; j <=i; j++) {
//				dp[i]에는 위의 경우의 수에따라 최대값을 대입한다.
				dp[i] = Math.max(dp[i-j] + p[j], dp[i]);
			}
		}
		System.out.println(dp[n]);
	}

}