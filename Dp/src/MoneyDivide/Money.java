package MoneyDivide;

import java.util.Arrays;
import java.util.Scanner;

public class Money {
//	효율적인 화폐구성
//	N가지 종류의 화폐가 있다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다.
//	이때 각 종류의 화폐는 몇 개라도 사용할 수 있다
//	예를 들어 2원, 3원 단위의 화폐가 있을 때는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐 개수이다.
//	M원을 만들기 위한 최소한의 화폐 개수를 출력하는 프로그램을 작성하라
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
//		나눌수있는(원하는 금액을 만들수있는) 주화의 갯수를 입력받는다.
		int n = s.nextInt();
//		원하는 금액을 입력한다.
		int m = s.nextInt();
//		dp테이블을 생성한다.(원하는 금액의 +1)
		int [] d = new int[m+1];
//		dp테이블의 모든 값을 10001로 초기화 시켜주었다.
//		1로 만들수있는 최대값인 10000보다 1 더하여서 무한대를 적용하였다.
		Arrays.fill(d,10001);
//		주화를 담을 배열을 생성하였다.
		int[] arr = new int[n];
//		생성한 배열에 주화를 종류별로 담는다.
		for(int i = 0; i < n; i++) {
			arr[i] = s.nextInt();
		}
//		첫번째 값인 0번 인덱스는 0원으로 넣어준다.
//		0원이 들어오면 0번으로 반환하면되기 때문에 
		d[0] = 0;
//		이중반복문으로 해결한다.
//		외부에는 주화종류의 갯수만큼
//		내부에는 현재의 주화크기부터 원하는 금액까지
		for(int i = 0; i < n; i++) {
			for(int j = arr[i]; j <= m; j++) {
//				만약 현재 금액에서 현재 선택되어진 주화를 뺀 금액의 최적해 값이 10001이 아니라면 
//				즉 해결가능하다면
				if(d[j-arr[i]] != 10001) {
//					현재금액의 최적해 값보다 현재금액에서 현재주화를 뺀 금액의 최적해에서 1을 더한 숫자가 적다면 그 값을 사용
					d[j] = Math.min(d[j], d[j-arr[i]]+1);
				}
			}
		}
//		만약 원하는 금액의 최적해 값이 산출되지 못하였다면 -1을 출력한다.
		if(d[m]==10001) {
			System.out.println("-1");
		}
//		그외에는 원하는 금액에 해당하는 인덱스값(최적해값)을 출력한다.
		else{
			System.out.println(d[m]);
		}
		
	}

}